# handlers/assortment.py

"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
    1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ".
    2. –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏ –±—Ä–µ–Ω–¥–∞.
    3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞.
    4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–≤–∫—É—Å–∞) —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.
"""

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot import dp, bot
from db import cursor, db, decrypt_code, get_table_name

btn_back = InlineKeyboardButton('–ú–µ–Ω—é', callback_data='back')

@dp.callback_query_handler(Text('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ'))
async def handle_assortment_menu(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.
    
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—É –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    kb = InlineKeyboardMarkup(row_width=2)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ"
    for item in cursor.execute('SELECT * FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ"').fetchall():
        # item[0] ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ, item[1] ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
        kb.insert(InlineKeyboardButton(item[0], callback_data=f'assort_{item[1]}'))
    kb.add(btn_back)
    await callback_query.message.edit_text('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ')
    await callback_query.message.edit_reply_markup(kb)
    await callback_query.answer()

@dp.callback_query_handler(Text(startswith='assort_'))
async def handle_assortment_selection(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.
    
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—Ä–µ–Ω–¥–∞–º–∏, –æ—Ç–Ω–æ—Å—è—â–∏–º–∏—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∏–¥–∞ "assort_{id}".
    """
    assortment_id = callback_query.data[len("assort_"):]
    kb = InlineKeyboardMarkup(row_width=2)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–º–µ–Ω–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º assortment_id
    for item in cursor.execute(f'SELECT * FROM "{assortment_id}"').fetchall():
        # item[0] ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞, item[1] ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—Ä–µ–Ω–¥–∞
        kb.insert(InlineKeyboardButton(item[0], callback_data=f'brand_{assortment_id}_{item[1]}'))
    kb.add(InlineKeyboardButton('<<–ù–∞–∑–∞–¥', callback_data='–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ'))
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
    text = cursor.execute('SELECT tastes FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE id=?', (assortment_id,)).fetchone()[0]
    await callback_query.message.edit_text(text)
    await callback_query.message.edit_reply_markup(kb)
    await callback_query.answer()

@dp.callback_query_handler(Text(startswith='brand_'))
async def handle_assortment_brand_selection(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞ –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.
    
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∏–¥–∞ "brand_{assortment_id}_{brand_id}".
    """
    data = callback_query.data[len("brand_"):]
    kb = InlineKeyboardMarkup(row_width=2)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–º–µ–Ω–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    for item in cursor.execute(f'SELECT * FROM "{data}"').fetchall():
        # item[0] ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, item[1] ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞
        kb.insert(InlineKeyboardButton(item[0], callback_data=f'product_{data}_{item[1]}'))
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
    kb.add(InlineKeyboardButton('<<–ù–∞–∑–∞–¥', callback_data=f'assort_{data.split("_")[0]}'))
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text = cursor.execute('SELECT tastes FROM "{}" WHERE id=?'.format(data.split("_")[0]), (data.split('_')[1],)).fetchone()[0]
    await callback_query.message.edit_text(text)
    await callback_query.message.edit_reply_markup(kb)
    await callback_query.answer()

@dp.callback_query_handler(Text(startswith='product_'))
async def handle_product_detail(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –µ–≥–æ –≤–∫—É—Å–æ–≤.
    
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤–∫—É—Å–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Ñ–æ—Ç–æ –∏ —Ü–µ–Ω—É.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∏–¥–∞ "product_{product_code}".
    """
    kb = InlineKeyboardMarkup(row_width=2)
    # –†–∞–∑–±–∏–≤–∞–µ–º callback_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å—Ç–µ–π –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞
    parts = callback_query.data[len("product_"):].split('_')
    # –ü–æ–ª–Ω—ã–π –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤–∫—É—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2_1_1")
    full_product_code = '_'.join(parts)
    main_taste = decrypt_code(full_product_code)  # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–æ–¥—É

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∫—É—Å–æ–≤, –∏–∑–≤–ª–µ–∫–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–º–µ–Ω–µ–º full_product_code
    for item in cursor.execute('SELECT * FROM "{}"'.format(full_product_code)).fetchall():
        # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∫—É—Å–∞, –¥–æ–±–∞–≤–ª—è—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∫—É—Å–∞
        flavor_cb = f'{full_product_code}_{item[1]}'  # –ü—Ä–∏–º–µ—Ä: "2_1_1_2"
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = cursor.execute(
                "SELECT count FROM {} WHERE cart = ?".format(f'"{callback_query.from_user.id}"'),
                (flavor_cb,)
            ).fetchone()
            count_value = result[0] if result is not None else 0
            if count_value:
                # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∫—É—Å–∞
                kb.insert(InlineKeyboardButton(f'({count_value}){item[0]}', callback_data=f'addCart_{flavor_cb}'))
            else:
                kb.insert(InlineKeyboardButton(item[0], callback_data=f'addCart_{flavor_cb}'))
        except Exception:
            kb.insert(InlineKeyboardButton(item[0], callback_data=f'addCart_{flavor_cb}'))

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –±—Ä–µ–Ω–¥–∞
    category_code = "_".join(parts[:-1])  # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ full_product_code = "2_1_1", —Ç–æ category_code = "2_1"
    kb.add(InlineKeyboardButton('<<–ù–∞–∑–∞–¥', callback_data=f'brand_{category_code}'))

    # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
    cart_count = cursor.execute("SELECT count(*) FROM {} ".format(f'"{callback_query.from_user.id}"')).fetchone()
    if cart_count and cart_count[0] != 0:
        kb.insert(InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='cart1'))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ (—Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω—É) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã photos
    photo_data = cursor.execute('SELECT * FROM photos WHERE names==?', (full_product_code,)).fetchone()
    if photo_data is None:
        photo_data = ("", "–±–µ–∑ —Ñ–æ—Ç–æ", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "0‚ÇΩ")
    try:
        price = int(photo_data[-1][:-1])
    except Exception:
        price = 0

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ decrypt_code)
    product_name = decrypt_code(full_product_code)
    if photo_data[1] != '–±–µ–∑ —Ñ–æ—Ç–æ':
        text = f'[‚Äã]({photo_data[1]})*{main_taste} {product_name}*\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{photo_data[2]}\n*–¶–µ–Ω–∞:* {price}‚ÇΩ'
    else:
        text = f'*{main_taste} {product_name}*\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{photo_data[2]}\n*–¶–µ–Ω–∞:* {price}‚ÇΩ'

    await callback_query.message.edit_text(text, parse_mode='Markdown')
    await callback_query.message.edit_reply_markup(reply_markup=kb)
    await callback_query.answer()

@dp.callback_query_handler(Text(startswith='addCart_'))
async def handle_add_to_cart(callback_query: types.CallbackQuery):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ (–≤–∫—É—Å–∞) –≤ –∫–æ—Ä–∑–∏–Ω—É.
    
    –ï—Å–ª–∏ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.
    –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback_query (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∏–¥–∞ "addCart_{flavor_code}".
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, "2_1_1_2"
    flavor_code = callback_query.data[len("addCart_"):]
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤–∫—É—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, "2_1_1"
    product_code = '_'.join(flavor_code.split('_')[:-1])
    
    product_data = cursor.execute('SELECT price FROM photos WHERE names=?', (product_code,)).fetchone()
    if product_data is None:
        await callback_query.answer('–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå', show_alert=True)
        return
    price = product_data[0]

    user_cart_table = f'"{callback_query.from_user.id}"'
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute(f'CREATE TABLE IF NOT EXISTS {user_cart_table} (cart TEXT, price TEXT, count INTEGER)')
    db.commit()

    product_count = cursor.execute(
        f'SELECT count FROM {user_cart_table} WHERE cart=?', (flavor_code,)
    ).fetchone()
    if product_count is None:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        cursor.execute(
            f'INSERT INTO {user_cart_table} (cart, price, count) VALUES (?, ?, ?)',
            (flavor_code, price, 1)
        )
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        new_count = product_count[0] + 1
        cursor.execute(
            f'UPDATE {user_cart_table} SET count=? WHERE cart=?',
            (new_count, flavor_code)
        )
    db.commit()

    await callback_query.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ', show_alert=True)
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –º–µ–Ω—è–µ–º callback_data –Ω–∞ "product_" + product_code (–±–µ–∑ –≤–∫—É—Å–∞)
    callback_query.data = "product_" + product_code
    await handle_product_detail(callback_query)
