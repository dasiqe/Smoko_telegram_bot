# handlers/admin.py

"""–ú–æ–¥—É–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è:
    - –î–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    - –£–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –±—Ä–µ–Ω–¥–æ–≤.
    - –†–∞–±–æ—Ç–∞ —Å –∞–∫—Ü–∏—è–º–∏.
"""

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup

from bot import dp, bot
from db import cursor, db, decrypt_code, get_table_name
from config import ADMIN_IDS

btn_back = InlineKeyboardButton('–ú–µ–Ω—é', callback_data='back')


class FSMAdmin(StatesGroup):
    category = State()
    brand = State()
    product_name = State()
    description = State()
    display_price = State()
    photo_url = State()
    price_options = State()


class FSMDelete(StatesGroup):
    category = State()
    product_name = State()
    surname = State()
    extra = State()


class FSMSale(StatesGroup):
    sale_name = State()
    sale_description = State()


@dp.callback_query_handler(text='–î–æ–±–∞–≤–∏—Ç—å', state=None)
async def handle_add_initiate(callback_query: types.CallbackQuery):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–ª–∏ –≤–≤–æ–¥–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    try:
        for item in cursor.execute('SELECT * FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ"').fetchall():
            kb.insert(item[0])
    except Exception:
        pass
    kb.add(btn_back)
    await callback_query.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π',
        reply_markup=kb
    )
    await FSMAdmin.category.set()
    await callback_query.answer()


@dp.message_handler(state=FSMAdmin.category)
async def handle_admin_category(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥.
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    async with state.proxy() as data:
        data['category'] = message.text
        try:
            code = str(cursor.execute(
                'SELECT id FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE tastes== ?', (data["category"],)
            ).fetchone()[0])
            for item in cursor.execute(f'SELECT * FROM "{code}"').fetchall():
                kb.insert(item[0])
        except Exception:
            pass
    kb.add(btn_back)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π', reply_markup=kb)
    await FSMAdmin.next()


@dp.message_handler(state=FSMAdmin.brand)
async def handle_admin_brand(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –±—Ä–µ–Ω–¥–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    async with state.proxy() as data:
        kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        data['brand'] = message.text
        try:
            code = str(cursor.execute(
                'SELECT id FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE tastes== ?', (data["category"],)
            ).fetchone()[0])
            brand_code = code + '_' + str(cursor.execute(
                'SELECT id FROM "{}" WHERE tastes== ?'.format(code), (data["brand"],)
            ).fetchone()[0])
            for item in cursor.execute(f'SELECT * FROM "{brand_code}"').fetchall():
                kb.insert(item[0])
        except Exception:
            pass
    kb.add(btn_back)
    await FSMAdmin.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=kb)


@dp.message_handler(state=FSMAdmin.product_name)
async def handle_admin_product_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏, –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    async with state.proxy() as data:
        data['product_name'] = message.text
        try:
            code = str(cursor.execute(
                'SELECT id FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE tastes== ?', (data["category"],)
            ).fetchone()[0])
            brand_code = code + '_' + str(cursor.execute(
                'SELECT id FROM "{}" WHERE tastes== ?'.format(code), (data["brand"],)
            ).fetchone()[0])
            product_code = brand_code + '_' + str(cursor.execute(
                'SELECT id FROM "{}" WHERE tastes== ?'.format(brand_code), (data["product_name"],)
            ).fetchone()[0])
            if cursor.execute(
                'SELECT count(*) FROM photos WHERE names = ?', (product_code,)
            ).fetchone()[0] != 0:
                current_desc = cursor.execute(
                    'SELECT desc FROM photos WHERE names=?', (product_code,)
                ).fetchone()[0]
                kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                kb.add('–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π', btn_back)
                await message.answer('–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' + current_desc, reply_markup=kb)
            else:
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=ReplyKeyboardMarkup(
                    resize_keyboard=True, row_width=2
                ).add(btn_back))
        except Exception:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=ReplyKeyboardMarkup(
                resize_keyboard=True, row_width=2
            ).add(btn_back))
    await FSMAdmin.next()


@dp.message_handler(state=FSMAdmin.description)
async def handle_admin_description(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –µ—ë –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    async with state.proxy() as data:
        data['description'] = message.text
        try:
            code = str(cursor.execute(
                'SELECT id FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE tastes== ?', (data["category"],)
            ).fetchone()[0])
            brand_code = code + '_' + str(cursor.execute(
                'SELECT id FROM "{}" WHERE tastes== ?'.format(code), (data["brand"],)
            ).fetchone()[0])
            product_code = brand_code + '_' + str(cursor.execute(
                'SELECT id FROM "{}" WHERE tastes== ?'.format(brand_code), (data["product_name"],)
            ).fetchone()[0])
            if cursor.execute(
                'SELECT count(*) FROM photos WHERE names = ?', (product_code,)
            ).fetchone()[0] != 0:
                current_price = cursor.execute(
                    'SELECT price FROM photos WHERE names=?', (product_code,)
                ).fetchone()[0]
                kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                kb.add('–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π', btn_back)
                await message.answer('–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:\n' + current_price, reply_markup=kb)
            else:
                await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É', reply_markup=ReplyKeyboardMarkup(
                    resize_keyboard=True, row_width=2
                ).add(btn_back))
        except Exception:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É', reply_markup=ReplyKeyboardMarkup(
                resize_keyboard=True, row_width=2
            ).add(btn_back))
    await FSMAdmin.next()


@dp.message_handler(state=FSMAdmin.display_price)
async def handle_admin_display_price(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—É –∏, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    async with state.proxy() as data:
        data['display_price'] = message.text.replace('‚ÇΩ', '') + '‚ÇΩ'
        try:
            code = str(cursor.execute(
                'SELECT id FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE tastes== ?', (data["category"],)
            ).fetchone()[0])
            brand_code = code + '_' + str(cursor.execute(
                'SELECT id FROM "{}" WHERE tastes== ?'.format(code), (data["brand"],)
            ).fetchone()[0])
            product_code = brand_code + '_' + str(cursor.execute(
                'SELECT id FROM "{}" WHERE tastes== ?'.format(brand_code), (data["product_name"],)
            ).fetchone()[0])
            if cursor.execute(
                'SELECT count(*) FROM photos WHERE names = ?', (product_code,)
            ).fetchone()[0] != 0:
                current_photo = cursor.execute(
                    'SELECT photos FROM photos WHERE names=?', (product_code,)
                ).fetchone()[0]
                kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                kb.add('–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π', '–±–µ–∑ —Ñ–æ—Ç–æ', btn_back)
                await message.answer(
                    f"–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{current_photo}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è {data['product_name']}\nhttps://ibb.org.ru/?lang=ru",
                    reply_markup=kb
                )
            else:
                await message.answer(
                    f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è {data['product_name']}\nhttps://ibb.org.ru/?lang=ru",
                    reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add('–±–µ–∑ —Ñ–æ—Ç–æ', btn_back)
                )
        except Exception:
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è {data['product_name']}\nhttps://ibb.org.ru/?lang=ru",
                reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add('–±–µ–∑ —Ñ–æ—Ç–æ', btn_back)
            )
    await FSMAdmin.next()


@dp.message_handler(state=FSMAdmin.photo_url)
async def handle_admin_photo_url(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç URL –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –∑–∞–¥–∞–Ω—ã, –ª–∏–±–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –∏—Ö.
    """
    async with state.proxy() as data:
        data['photo_url'] = message.text
        try:
            code = str(cursor.execute(
                'SELECT id FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE tastes== ?', (data["category"],)
            ).fetchone()[0])
            brand_code = code + '_' + str(cursor.execute(
                'SELECT id FROM "{}" WHERE tastes== ?'.format(code), (data["brand"],)
            ).fetchone()[0])
            product_code = brand_code + '_' + str(cursor.execute(
                'SELECT id FROM "{}" WHERE tastes== ?'.format(brand_code), (data["product_name"],)
            ).fetchone()[0])
            tastes_str = ''
            for item in cursor.execute(f'SELECT tastes FROM "{product_code}"').fetchall():
                tastes_str += item[0] + ','
            kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            kb.add('–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π', btn_back)
            await message.answer('–í–∫—É—Å—ã:\n' + tastes_str[:-1], reply_markup=kb)
        except Exception:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å—ã', reply_markup=ReplyKeyboardMarkup(
                resize_keyboard=True, row_width=2
            ).add(btn_back))
    await FSMAdmin.next()


@dp.message_handler(state=FSMAdmin.price_options)
async def handle_admin_price_options(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω—ã –∏–ª–∏ –≤–∫—É—Å–æ–≤.
    
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–≤–æ–¥–∞:
        - –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –±—Ä–µ–Ω–¥, –ø—Ä–æ–¥—É–∫—Ç –∏ –∏—Ö —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
        - –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É photos.
        - –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω—ã/–≤–∫—É—Å–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É.
    –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    async with state.proxy() as data:
        data['price_options'] = message.text
        if cursor.execute('SELECT count(*) FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE tastes = ?', (data['category'],)).fetchone()[0] == 0:
            cursor.execute('INSERT INTO "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" (tastes) VALUES (?)', (data['category'],))
        code = str(cursor.execute(
            'SELECT id FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE tastes== ?', (data["category"],)
        ).fetchone()[0])
        db.execute(f'CREATE TABLE IF NOT EXISTS "{code}" (tastes TEXT, id INTEGER PRIMARY KEY)')
        if cursor.execute('SELECT count(*) FROM "{}" WHERE tastes = ?'.format(code), (data['brand'],)).fetchone()[0] == 0:
            cursor.execute('INSERT INTO "{}" (tastes) VALUES (?)'.format(code), (data['brand'],))
        brand_code = code + '_' + str(cursor.execute(
            'SELECT id FROM "{}" WHERE tastes== ?'.format(code), (data["brand"],)
        ).fetchone()[0])
        db.execute(f'CREATE TABLE IF NOT EXISTS "{brand_code}" (tastes TEXT, id INTEGER PRIMARY KEY)')
        if cursor.execute('SELECT count(*) FROM "{}" WHERE tastes = ?'.format(brand_code), (data['product_name'],)).fetchone()[0] == 0:
            cursor.execute('INSERT INTO "{}" (tastes) VALUES (?)'.format(brand_code), (data['product_name'],))
        product_code = brand_code + '_' + str(cursor.execute(
            'SELECT id FROM "{}" WHERE tastes== ?'.format(brand_code), (data["product_name"],)
        ).fetchone()[0])
        db.execute(f'CREATE TABLE IF NOT EXISTS "{product_code}" (tastes TEXT, id INTEGER PRIMARY KEY)')
        if cursor.execute('SELECT count(*) FROM photos WHERE names = ?', (product_code,)).fetchone()[0] == 0:
            cursor.execute('INSERT INTO photos VALUES (?, ?, ?, ?)', (product_code, data['photo_url'], data['description'], data['display_price']))
        else:
            if data['photo_url'] != '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π':
                cursor.execute('UPDATE photos SET photos=? WHERE names = ?', (data['photo_url'], product_code))
            if data['description'] != '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π':
                cursor.execute('UPDATE photos SET desc=? WHERE names = ?', (data['description'], product_code))
            if data['display_price'].replace('‚ÇΩ', '') != '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π':
                cursor.execute('UPDATE photos SET price=? WHERE names = ?', (data['display_price'], product_code))
        if data['price_options'] != '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π':
            price_str = str(data['price_options']).replace(', ', ',').replace(' , ', ',').replace(' ,', ',').replace(',,', ',')
            for price_option in price_str.split(','):
                cursor.execute('INSERT INTO "{}" (tastes) VALUES (?)'.format(product_code), (price_option,))
        db.commit()
        try:
            photo_record = cursor.execute('SELECT * FROM photos WHERE names=?', (product_code,)).fetchone()
            tastes_str = ''
            for item in cursor.execute(f'SELECT tastes FROM "{photo_record[0]}"').fetchall():
                tastes_str += item[0] + ','
            await message.answer(
                f"*{data['product_name']}*\n{photo_record[2]}\n*—Å–æ –≤–∫—É—Å–∞–º–∏:* {tastes_str[:-1]}\n*—Ü–µ–Ω–æ–π –≤* {photo_record[3]}\n*–æ–±–Ω–æ–≤–ª–µ–Ω*[‚Äã]({photo_record[1]})",
                parse_mode='Markdown'
            )
        except Exception:
            if data['photo_url'] == '–±–µ–∑ —Ñ–æ—Ç–æ':
                await message.answer(
                    f"*{data['product_name']}*\n{data['description']}\n*—Å–æ –≤–∫—É—Å–∞–º–∏:* {data['price_options']}\n*—Ü–µ–Ω–æ–π –≤* {data['display_price']}\n*—Å–æ–∑–¥–∞–Ω*[‚Äã]({data['photo_url']})",
                    parse_mode='Markdown'
                )
            else:
                await message.answer(
                    f"*{data['product_name']}*\n{data['description']}\n*—Å–æ –≤–∫—É—Å–∞–º–∏:* {data['price_options']}\n*—Ü–µ–Ω–æ–π –≤* {data['display_price']}\n*—Å–æ–∑–¥–∞–Ω*",
                    parse_mode='Markdown'
                )
    await state.finish()


@dp.callback_query_handler(text='–£–¥–∞–ª–∏—Ç—å')
async def handle_delete_initiate(callback_query: types.CallbackQuery):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –±—Ä–µ–Ω–¥–æ–≤.
    
    –í—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    kb = InlineKeyboardMarkup(row_width=2)
    for item in cursor.execute('SELECT * FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ"').fetchall():
        kb.insert(InlineKeyboardButton(item[0], callback_data=f'delAssort_{item[1]}'))
    kb.add(btn_back)
    await callback_query.message.edit_text('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ')
    await callback_query.message.edit_reply_markup(kb)
    await callback_query.answer()


@dp.callback_query_handler(Text(startswith='delAssort_'))
async def handle_delete_selection(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ.
    """
    assortment_id = callback_query.data[len("delAssort_"):]
    kb = InlineKeyboardMarkup(row_width=2)
    for item in cursor.execute(f'SELECT * FROM "{assortment_id}"').fetchall():
        kb.insert(InlineKeyboardButton(item[0], callback_data=f'delBrand_{assortment_id}_{item[1]}'))
    kb.add(InlineKeyboardButton('<<–ù–∞–∑–∞–¥', callback_data='–£–¥–∞–ª–∏—Ç—å'))
    text = cursor.execute('SELECT tastes FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE id=?', (assortment_id,)).fetchone()[0]
    await callback_query.message.edit_text(text)
    await callback_query.message.edit_reply_markup(kb)
    await callback_query.answer()


@dp.callback_query_handler(Text(startswith='delBrand_'))
async def handle_delete_brand_selection(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏ –æ–ø—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    data = callback_query.data[len("delBrand_"):]
    kb = InlineKeyboardMarkup(row_width=2)
    query = cursor.execute(f'SELECT * FROM "{data}"')
    for item in query.fetchall():
        kb.add(InlineKeyboardButton(item[0], callback_data=f'delItem_{data}_{item[1]}'))
    kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å ' + decrypt_code(data), callback_data='delComplete_' + data))
    kb.add(InlineKeyboardButton('<<–ù–∞–∑–∞–¥', callback_data=f'delAssort_' + "_".join(data.split("_")[:-1])))
    text = decrypt_code(data)
    await callback_query.message.edit_text(text)
    await callback_query.message.edit_reply_markup(kb)
    await callback_query.answer()


@dp.callback_query_handler(Text(startswith='delItem_'))
async def handle_delete_item_selection(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    
    –í—ã–≤–æ–¥–∏—Ç –æ–ø—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    """
    kb = InlineKeyboardMarkup(row_width=2)
    data = callback_query.data[len("delItem_"):]
    for item in cursor.execute(f'SELECT * FROM "{data}"').fetchall():
        kb.insert(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {item[0]}', callback_data=f'delSingle_{data}_{item[1]}'))
    kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å ' + decrypt_code(data), callback_data='delAlternate_' + data))
    kb.add(InlineKeyboardButton('<<–ù–∞–∑–∞–¥', callback_data=f'delBrand_' + "_".join(data.split("_")[:-1])))
    await callback_query.message.edit_text(decrypt_code(data))
    await callback_query.message.edit_reply_markup(kb)
    await callback_query.answer()


@dp.callback_query_handler(Text(startswith='delComplete_'))
async def handle_delete_complete_selection(callback_query: types.CallbackQuery):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ –ª–∏–Ω–µ–π–∫–∏.
    
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã photos, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É.
    """
    data = callback_query.data[len("delComplete_"):]
    del_name = decrypt_code(data)
    history_text = cursor.execute(
        'SELECT tastes FROM "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüóÇ" WHERE id=?', (data.split('_')[0],)
    ).fetchone()[0]
    await callback_query.message.edit_text(history_text)
    await callback_query.answer(del_name + ' —É–¥–∞–ª–µ–Ω')
    for item in cursor.execute(f'SELECT * FROM "{data}"').fetchall():
        cursor.execute('DELETE FROM photos WHERE names = ?', (item[0],))
        db.commit()
        cursor.execute('DROP TABLE "{}_{}"'.format(data, item[1]))
        db.commit()
    cursor.execute('DROP TABLE "{}"'.format(data))
    db.commit()
    cursor.execute('DELETE FROM "{}" WHERE tastes = ?'.format(get_table_name(data)), (del_name,))
    db.commit()
    kb = InlineKeyboardMarkup(row_width=2)
    for item in cursor.execute(f'SELECT * FROM "{get_table_name(data)}"').fetchall():
        kb.insert(InlineKeyboardButton(item[0], callback_data=f'delBrand_{data}_{item[1]}'))
    kb.add(InlineKeyboardButton('<<–ù–∞–∑–∞–¥', callback_data='–£–¥–∞–ª–∏—Ç—å'))
    await callback_query.message.edit_reply_markup(kb)


@dp.callback_query_handler(Text(startswith='delAlternate_'))
async def handle_delete_alternate(callback_query: types.CallbackQuery):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: —É–¥–∞–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏.
    """
    kb = InlineKeyboardMarkup(row_width=2)
    data = callback_query.data[len("delAlternate_"):]
    del_name = decrypt_code(data)
    cursor.execute('DELETE FROM photos WHERE names = ?', (del_name,))
    db.commit()
    cursor.execute('DROP TABLE "{}"'.format(data))
    db.commit()
    cursor.execute('DELETE FROM "{}" WHERE tastes = ?'.format(get_table_name(data)), (del_name,))
    db.commit()
    query = cursor.execute(f'SELECT * FROM "{get_table_name(data)}"')
    for item in query.fetchall():
        kb.add(InlineKeyboardButton(item[0], callback_data=f'delItem_{get_table_name(data)}_{item[1]}'))
    kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å ' + decrypt_code(get_table_name(data)), callback_data='delComplete_' + get_table_name(data)))
    kb.add(InlineKeyboardButton('<<–ù–∞–∑–∞–¥', callback_data=f'delAssort_' + get_table_name(get_table_name(data))))
    await callback_query.answer(f'{del_name} —É–¥–∞–ª–µ–Ω')
    await callback_query.message.edit_text(decrypt_code(get_table_name(data)))
    await callback_query.message.edit_reply_markup(kb)


@dp.callback_query_handler(Text(startswith='delSingle_'))
async def handle_delete_individual_item(callback_query: types.CallbackQuery):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.
    
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    data = callback_query.data[len("delSingle_"):]
    del_name = decrypt_code(data)
    cursor.execute('DELETE FROM "{}" WHERE tastes = ?'.format(get_table_name(data)), (del_name,))
    db.commit()
    kb = InlineKeyboardMarkup(row_width=2)
    for item in cursor.execute(f'SELECT * FROM "{get_table_name(data)}"').fetchall():
        kb.insert(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {item[0]}', callback_data=f'delSingle_{get_table_name(data)}_{item[1]}'))
    kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å ' + decrypt_code(get_table_name(data)), callback_data='delAlternate_' + get_table_name(data)))
    kb.add(InlineKeyboardButton('<<–ù–∞–∑–∞–¥', callback_data=f'delBrand_' + get_table_name(get_table_name(data))))
    await callback_query.message.edit_reply_markup(kb)
    await callback_query.answer(f'{del_name} —É–¥–∞–ª–µ–Ω')


@dp.callback_query_handler(text='–î–æ–±–∞–≤–∏—Ç—å–∞–∫—Ü–∏—é', state=None)
async def handle_add_sale_initiate(callback_query: types.CallbackQuery):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ü–∏–∏.
    """
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(btn_back)
    await callback_query.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏')
    await callback_query.message.edit_reply_markup(kb)
    await FSMSale.sale_name.set()
    await callback_query.answer()


@dp.message_handler(state=FSMSale.sale_name)
async def handle_sale_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ü–∏–∏.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è.
    """
    async with state.proxy() as data:
        data['sale_name'] = message.text
    await FSMSale.sale_description.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏', reply_markup=ReplyKeyboardMarkup(
        resize_keyboard=True, row_width=1
    ).add(btn_back))


@dp.message_handler(state=FSMSale.sale_description)
async def handle_sale_desc(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    
    –î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å.
    """
    async with state.proxy() as data:
        data['sale_description'] = message.text
        cursor.execute('INSERT INTO sales (positions, desc) VALUES (?, ?)', (data['sale_name'], data['sale_description']))
    db.commit()
    await message.answer(f'–ê–∫—Ü–∏—è {data["sale_name"]} —Å–æ–∑–¥–∞–Ω–∞')
    await state.finish()
