# handlers/cart.py

"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–∫—É–ø–æ–∫: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.

–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã, –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏,
–∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
"""

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot import dp, bot
from db import cursor, db, decrypt_code, get_table_name

async def update_cart_display(callback_query: types.CallbackQuery):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ, —Ü–µ–Ω–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–∏–¥–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    
    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
        - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ decrypt_code.
        - –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ callback_data, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "cart<number>".
    """
    try:
        kb = InlineKeyboardMarkup(row_width=4)
        cart_items = cursor.execute('SELECT * FROM {} '.format(f'"{callback_query.from_user.id}"')).fetchall()
        index = int(callback_query.data[4:]) - 1  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "cart<number>"
        cart_item = cart_items[index]
        main_taste = decrypt_code(cart_item[0])
        taste_prev = decrypt_code('_'.join(cart_item[0].split('_')[:-1]))
        taste_prev2 = decrypt_code('_'.join(cart_item[0].split('_')[:-2]))
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
        photo_data = cursor.execute('SELECT * FROM photos WHERE names == ?', ('_'.join(cart_item[0].split('_')[:-1]),)).fetchone()
        price = int(cart_item[1][:-1])
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 10% –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if cursor.execute('SELECT first_pressed FROM id WHERE users = ?', (str(callback_query.from_user.id),)).fetchone()[0] == 1:
            price = int(price * 0.9)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 5% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—Ç—Ä–∞—Ç–∏–≤—à–∏—Ö –±–æ–ª–µ–µ 5000‚ÇΩ
        if cursor.execute('SELECT spend FROM id WHERE users = ?', (str(callback_query.from_user.id),)).fetchone()[0] >= 5000:
            price = int(price * 0.95)
        kb.add(InlineKeyboardButton(f'{price}*{cart_item[2]}={price * int(cart_item[2])}‚ÇΩ', callback_data='rubles'))
        cart_decrypted = [decrypt_code(item[0])
                            for item in cursor.execute("SELECT cart FROM {} ".format(f'"{callback_query.from_user.id}"')).fetchall()]
        kb.add(
            InlineKeyboardButton('üóëÔ∏è', callback_data=f'delCart{cart_item[0]}'),
            InlineKeyboardButton('üîΩ', callback_data='dec' + cart_item[0]),
            InlineKeyboardButton(cart_item[2], callback_data='quantity'),
            InlineKeyboardButton('üîº', callback_data='inc' + cart_item[0])
        )
        kb.add(
            InlineKeyboardButton('‚óÄÔ∏è', callback_data='moveLeft' + cart_item[0]),
            InlineKeyboardButton(f'{int(cart_decrypted.index(main_taste)) + 1} –∏–∑ {len(cart_decrypted)}', callback_data='position'),
            InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='moveRight' + cart_item[0])
        )
        total_price = 0
        for item in cursor.execute('SELECT * FROM {} '.format(f'"{callback_query.from_user.id}"')).fetchall():
            total_price += int(item[1][:-1]) * int(item[2])
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫ –∫ –æ–±—â–µ–π —Å—É–º–º–µ –∑–∞–∫–∞–∑–∞
        if cursor.execute('SELECT first_pressed FROM id WHERE users = ?', (str(callback_query.from_user.id),)).fetchone()[0] == 1:
            total_price = int(total_price * 0.9)
        if cursor.execute('SELECT spend FROM id WHERE users = ?', (str(callback_query.from_user.id),)).fetchone()[0] >= 5000:
            total_price = int(total_price * 0.95)
        kb.add(InlineKeyboardButton(f'–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ - {total_price}‚ÇΩ', callback_data=f'orderConfirm{total_price}'))
        kb.add(InlineKeyboardButton('–ú–µ–Ω—é', callback_data='back'))
        price_photo = int(photo_data[-1][:-1])
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∫ —Ü–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ñ–æ—Ç–æ
        if cursor.execute('SELECT first_pressed FROM id WHERE users = ?', (str(callback_query.from_user.id),)).fetchone()[0] == 1:
            price_photo = int(price_photo * 0.9)
        if cursor.execute('SELECT spend FROM id WHERE users = ?', (str(callback_query.from_user.id),)).fetchone()[0] >= 5000:
            price_photo = int(price_photo * 0.95)
        await callback_query.message.edit_text(
            f'[‚Äã]({photo_data[1]})*{taste_prev2} {taste_prev} {main_taste}*\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{photo_data[2]}\n*–¶–µ–Ω–∞:*{price_photo}‚ÇΩ',
            parse_mode='Markdown'
        )
        await callback_query.message.edit_reply_markup(reply_markup=kb)
        await callback_query.answer()
    except Exception:
        await callback_query.answer('–¢–æ–≤–∞—Ä –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.', show_alert=True)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞

@dp.callback_query_handler(Text(startswith='cart'))
async def handle_cart_display(callback_query: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: —É–¥–∞–ª—è–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    for item in cursor.execute('SELECT * FROM {} '.format(f'"{callback_query.from_user.id}"')).fetchall():
        try:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ —Ç–æ–≤–∞—Ä–æ–≤, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            if cursor.execute('SELECT count(*) FROM {} WHERE id=?'.format(f'"{get_table_name(item[0])}"'),
                                (item[0].split('_')[-1],)).fetchone()[0] != 1:
                cursor.execute('DELETE FROM {} WHERE cart=?'.format(f'"{callback_query.from_user.id}"'), (item[0],))
        except Exception:
            cursor.execute('DELETE FROM {} WHERE cart=?'.format(f'"{callback_query.from_user.id}"'), (item[0],))
        db.commit()
    await update_cart_display(callback_query)

@dp.callback_query_handler(Text('rubles'))
async def handle_total_sum_info(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞.
    """
    await callback_query.answer('–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')

@dp.callback_query_handler(Text(startswith='inc'))
async def handle_increase_quantity(callback_query: types.CallbackQuery):
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ 1.
    """
    cart_list = [item[0] for item in cursor.execute("SELECT cart FROM {} ".format(f'"{callback_query.from_user.id}"')).fetchall()]
    current_count = int(cursor.execute('SELECT count FROM {} WHERE cart=?'.format(f'"{callback_query.from_user.id}"'),
                                        (callback_query.data[len("inc"):],)).fetchone()[0])
    cursor.execute('UPDATE {} SET count = ? WHERE cart=?'.format(f'"{callback_query.from_user.id}"'),
                    (str(current_count + 1), callback_query.data[len("inc"):]))
    db.commit()
    new_index = str(int(cart_list.index(callback_query.data[len("inc"):])) + 1)
    # –û–±–Ω–æ–≤–ª—è–µ–º callback_data, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
    callback_query.data = 'cart' + new_index
    await update_cart_display(callback_query)

@dp.callback_query_handler(Text(startswith='dec'))
async def handle_decrease_quantity(callback_query: types.CallbackQuery):
    """
    –£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –Ω–µ –ø–æ–∑–≤–æ–ª—è—è –∑–Ω–∞—á–µ–Ω–∏—é –æ–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∏–∂–µ 1.
    
    –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ 1, –≤—ã–≤–æ–¥–∏—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è.
    """
    cart_list = [item[0] for item in cursor.execute("SELECT cart FROM {} ".format(f'"{callback_query.from_user.id}"')).fetchall()]
    current_count = int(cursor.execute('SELECT count FROM {} WHERE cart=?'.format(f'"{callback_query.from_user.id}"'),
                                        (callback_query.data[len("dec"):],)).fetchone()[0])
    if current_count == 1:
        await callback_query.answer('–ú–µ–Ω—å—à–µ –Ω–µ–∫—É–¥–∞. –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é.', show_alert=True)
    else:
        cursor.execute('UPDATE {} SET count=? WHERE cart=?'.format(f'"{callback_query.from_user.id}"'),
                        (current_count - 1, callback_query.data[len("dec"):]))
        db.commit()
    new_index = str(int(cart_list.index(callback_query.data[len("dec"):])) + 1)
    callback_query.data = 'cart' + new_index
    await update_cart_display(callback_query)

@dp.callback_query_handler(Text(startswith='moveLeft'))
async def handle_move_left_in_cart(callback_query: types.CallbackQuery):
    """
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≤–∞—Ä.
    
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.
    """
    cart_list = [item[0] for item in cursor.execute("SELECT cart FROM {} ".format(f'"{callback_query.from_user.id}"')).fetchall()]
    index = cart_list.index(callback_query.data[len("moveLeft"):])
    if index + 1 == 1:
        callback_query.data = 'cart' + str(len(cart_list))
    else:
        callback_query.data = 'cart' + str(index)
    await update_cart_display(callback_query)

@dp.callback_query_handler(Text(startswith='moveRight'))
async def handle_move_right_in_cart(callback_query: types.CallbackQuery):
    """
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä.
    
    –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.
    """
    cart_list = [item[0] for item in cursor.execute("SELECT cart FROM {} ".format(f'"{callback_query.from_user.id}"')).fetchall()]
    index = cart_list.index(callback_query.data[len("moveRight"):])
    if index + 1 == len(cart_list):
        callback_query.data = 'cart1'
    else:
        callback_query.data = 'cart' + str(index + 2)
    await update_cart_display(callback_query)

@dp.callback_query_handler(Text('position'))
async def handle_cart_position_info(callback_query: types.CallbackQuery):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    await callback_query.answer('–ü–æ–∑–∏—Ü–∏—è –≤ –∫–æ—Ä–∑–∏–Ω–µ')

@dp.callback_query_handler(Text(startswith='delCart'))
async def handle_delete_from_cart(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    
    –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—ë—Ç—Å—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ‚Äì –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–µ.
    """
    cart_list = [item[0] for item in cursor.execute("SELECT cart FROM {} ".format(f'"{callback_query.from_user.id}"')).fetchall()]
    cursor.execute('DELETE FROM {} WHERE cart=?'.format(f'"{callback_query.from_user.id}"'), (callback_query.data[len("delCart"):],))
    db.commit()
    if len(cart_list) > 1:
        index = cart_list.index(callback_query.data[len("delCart"):])
        if index + 1 == len(cart_list):
            callback_query.data = 'cart1'
        else:
            callback_query.data = 'cart' + str(index + 1)
        await update_cart_display(callback_query)
    else:
        await callback_query.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ–ø—É—Å—Ç–µ–ª–∞')

@dp.callback_query_handler(Text(startswith='orderConfirm'))
async def handle_order_confirmation(callback_query: types.CallbackQuery):
    """
    –û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑:
        - –°–æ–±–∏—Ä–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
        - –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ —Å—É–º–º—É, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        - –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.
        - –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É, —Å–æ–∑–¥–∞–≤–∞—è –µ—ë –∑–∞–Ω–æ–≤–æ.
    
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:
        - –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ —Ç–æ–≤–∞—Ä–∞.
        - –ï—Å–ª–∏ –≤ callback_data –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ 0.
    """
    import datetime
    order_details = ''
    user_id = str(callback_query.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
    for item in cursor.execute('SELECT * FROM {} '.format(f'"{user_id}"')).fetchall():
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é decrypt_code
        main_taste = decrypt_code('_'.join(item[0].split('_')[:-2]))
        secondary_taste = decrypt_code('_'.join(item[0].split('_')[:-1]))
        full_taste = decrypt_code(item[0])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è product –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prod_row = cursor.execute('SELECT product FROM id WHERE users=?', (user_id,)).fetchone()
        current_product = prod_row[0] if prod_row is not None else None
        
        if current_product and current_product not in [None, '', 'None']:
            new_product = f'{main_taste} {secondary_taste} {full_taste},' + current_product
            cursor.execute('UPDATE id SET product=? WHERE users=?', (new_product, user_id))
        else:
            cursor.execute('UPDATE id SET product=? WHERE users=?', (f'{main_taste} {secondary_taste} {full_taste},', user_id))
        db.commit()
        order_details += f'{main_taste} {secondary_taste} {full_taste} - {item[-1]}—à—Ç.\n\n'
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    try:
        price_total = int(callback_query.data[len("orderConfirm"):])
    except Exception:
        price_total = 0
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∞–º
    start_row = cursor.execute('SELECT start FROM id WHERE users=?', (user_id,)).fetchone()
    msg_val = start_row[0] if start_row is not None else None
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–∫–∞–∑–µ
    if msg_val is not None:
        try:
            for admin in cursor.execute('SELECT users FROM id').fetchall():
                admin_id = admin[0]
                await bot.forward_message(admin_id, callback_query.from_user.id, msg_val)
                await bot.send_message(
                    admin_id,
                    f'|\n@{callback_query.from_user.username}:\n{order_details}–ù–∞ —Å—É–º–º—É: {price_total}‚ÇΩ',
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton('–°–ø—Ä–æ—Å–∏—Ç—å c –¥—É—Ä–∞–∫–∞', callback_data=f'askManager {user_id}')
                    )
                )
        except Exception:
            pass
    else:
        try:
            for admin in cursor.execute('SELECT users FROM id').fetchall():
                admin_id = admin[0]
                await bot.send_message(
                    admin_id,
                    f'@{callback_query.from_user.username}:\n{order_details}–ù–∞ —Å—É–º–º—É: {price_total}‚ÇΩ',
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton('–°–ø—Ä–æ—Å–∏—Ç—å c –¥—É—Ä–∞–∫–∞', callback_data=f'askManager {user_id}')
                    )
                )
        except Exception:
            pass

    await callback_query.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏', show_alert=True)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history_row = cursor.execute('SELECT history FROM id WHERE users=?', (user_id,)).fetchone()
    current_history = history_row[0] if history_row is not None else None
    new_history = datetime.datetime.now().strftime("%d-%m-%y") + ':\n' + order_details + f'–ù–∞ —Å—É–º–º—É: {price_total}‚ÇΩ'
    if current_history is None or current_history in ['', 'None']:
        cursor.execute('UPDATE id SET history=? WHERE users=?', (new_history, user_id))
    else:
        cursor.execute('UPDATE id SET history=? WHERE users=?', (new_history + '\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n' + current_history, user_id))
    
    # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    first_pressed_row = cursor.execute('SELECT first_pressed FROM id WHERE users=?', (user_id,)).fetchone()
    if first_pressed_row and first_pressed_row[0] == 1:
        cursor.execute('UPDATE id SET first_pressed=0 WHERE users=?', (user_id,))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute('UPDATE id SET spend=spend+? WHERE users=?', (price_total, user_id))
    
    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã: —É–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å–æ–∑–¥–∞—ë–º –µ—ë –∑–∞–Ω–æ–≤–æ
    cursor.execute('DROP TABLE {} '.format(f'"{user_id}"'))
    db.commit()
    cursor.execute('CREATE TABLE IF NOT EXISTS {} (cart TEXT, price TEXT, count INTEGER)'.format(f'"{user_id}"'))
    db.commit()
